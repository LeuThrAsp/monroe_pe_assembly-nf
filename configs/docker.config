docker.enabled = true
docker.runOptions = "-u \$(id -u):\$(id -g)"

includeConfig 'docker_containers.config'

//#####################
//####Docker Params####
//#####################
//docker.enabled = true
//docker.runOptions = "-u \$(id -u):\$(id -g)"

//####################
//#Singularity Params#
//####################
//singularity.enabled = true
//singularity.runOptions = ""
//process.stageInMode = "link"

//####################
//##AWS Batch Params##
//####################
//process.executor = 'awsbatch'
//process.queue = ''
//aws.batch.cliPath = '/home/ec2-user/miniconda/bin/aws'
//aws.region = 'us-east-1'
//workDir = 's3://'

//#######################
//##Google Cloud Params##
//#######################
//process.executor = ''
//google.project = ''
//google.location = ''
//google.region = ''
//workDir = ''
//google.lifeSciences.bootDiskSize = 50.GB

//##################
//##Nextflow Tower##
//##################
//tower.accessToken = ''
//tower.enabled = true

//#########################
//####Docker Containers####
//#########################
tiptoft_container = 'staphb/tiptoft:1.0.0'
ivar_container = 'staphb/ivar:1.2.1-SC2'
samtools_container = 'staphb/samtools:1.10'
fastqc_container = 'staphb/fastqc:0.11.8'
trimmomatic_container = 'staphb/trimmomatic:0.39'
bbtools_container = 'staphb/bbtools:38.76'
pangolin_container = "staphb/pangolin:2.4.2-pangolearn-2021-05-19"

//#####################
//###Pipeline Params###
//#####################

//preProcess Parameters
params.name_split_on=""

//Trimming Parameters
params.minlength=75
params.windowsize=4
params.qualitytrimscore=30
threads=4

//iVar
params.ivar_mindepth=10
params.ivar_minfreq=0

process {

  errorStrategy = 'retry'
  maxRetries = 1

  cpus = 2
  memory = '2 GB'

  withName:preProcess{
     cpus = 2
     memory = '2 GB'
     container = fastqc_container
   }
   withName:trimmomatic{
     cpus = 4
     memory = '8 GB'
     container = trimmomatic_container
   }
   withName:cleanreads{
     cpus = 4
     memory = '8 GB'
     container = bbtools_container
   }
   withName:ivar{
     cpus = 4
     memory = '8 GB'
     container = ivar_container
   }
   withName:samtools{
     cpus = 2
     memory = '2 GB'
     container = samtools_container
   }
   withName:assembly_results{
     cpus = 2
     memory = '2 GB'
     container = tiptoft_container
   }
   withName:pangolin_typing{
     container = pangolin_container
   }
}

process {
  errorStrategy = 'retry'
  maxRetries = 1
  cpus = 2
  memory = '4 GB'

  if(params.pipe == "ont"){
    withName:guppy_basecalling{
      container = guppy_gpu_container
    }
    withName:guppy_demultiplexing{
      container = guppy_cpu_container
      stageInMode = 'copy'
    }
    withName:artic_guppyplex{
      container = artic_medaka_container
      stageInMode = 'copy'
    }
    withName:artic_medaka_pipeline{
      container = artic_medaka_container
    }
    withName:samtools{
      container = samtools_container
    }
    withName:pangolin_typing{
      container = pangolin_container
    }
    withName:assembly_results{
      container = tiptoft_container
    }
  }

  if(params.pipe == "clearlabs"){
    withName:artic_medaka_pipeline{
      container = theiagen_artic_medaka_container
    }
    withName:samtools{
      container = samtools_container
    }
    withName:pangolin_typing{
      container = pangolin_container
    }
    withName:assembly_results{
      container = tiptoft_container
    }
  }

  if(params.pipe == "pe"){
    withName:preProcess{
      container = fastqc_container
    }
    withName:trimmomatic{
      container = trimmomatic_container
    }
    withName:cleanreads{
      container = bbtools_container
    }
    withName:ivar{
      container = ivar_container
    }
    withName:samtools{
      container = samtools_container
    }
    withName:pangolin_typing{
      container = pangolin_container
    }
    withName:assembly_results{
      container = tiptoft_container
    }
  }

  if(params.pipe == "cluster"){
    withName:msa{
      container = mafft_container
    }
    withName:snp_matrix{
      container = snp_dists_container
    }
    withName:iqtree{
      container = iqtree_container
    }
    withName:render{
      container = render_container
    }
  }
}